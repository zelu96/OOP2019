Przydatne metody: Console.Write(), Console.WriteLine(), Console.ReadLine().

Otwórz program Visual Studio.
Utwórz nowy projekt - aplikacja konsolowa w jêzyku C#.
Napisz program wyœwietlaj¹cy zdanie “Hello world.”.
Stwórz zmienne: “bob” i “eva” i przypisz im odpowiednie przywitania (np. “Hello Bob”).
Stwórz zmienn¹ “userName”, a nastêpnie spraw, aby program pyta³ u¿ytkownika o jego imiê. Zmiena userName ma tworzyæ ci¹g “Hello X.”, gdzie X to podane imiê. Do tego celu u¿yj operatora + do ³¹czenia fragmentów ci¹gu.
Stwórz komentarze opisuj¹ce fragmenty kodu, a tak¿e dodaj komentarz zawieraj¹cy dane autora.
Przetestuj dzia³anie odwo³ania #region.
Umieœæ w komentarzu kod odpowiadaj¹cy za wyœwietlanie powitañ wykorzystuj¹c /* i */ lub skrótu ctrl + e, c (odwrotnoœæ to ctrl + e, u)
Stwórz kilka zmiennych liczbowych i sprawdŸ dzia³anie operatorów matematycznych (+, -, *, /,).
Stwórz zmienn¹ logiczn¹ oraz nadaj jej logiczn¹ wartoœæ. 
SprawdŸ dzia³anie operatora !.
Przetestuj dzia³anie nastêpuj¹cych operatorów (==, <, >, !=, &, I). 
“Odkomentuj” kod odpowiedzialny za wyœwietlanie powitañ i przy kolejnych wyœwietlaniach ustaw breakpointy.
SprawdŸ co mo¿esz zrobiæ w trybie debugowania.
Dodaj zmienna liczbow¹ a nastêpnie inkrementuj j¹ kilka razy. 
Postaw breakpoint w linii w której zosta³a nadana wartoœæ zmiennej.
W trybie debugowania dodaj zmienn¹ do listy obserwowanych.
Przechodz¹c krok po kroku obserwuj zmianê wartoœci. Czy mo¿esz j¹ zmieniæ rêcznie? Czemu mo¿e to s³u¿yæ?
U¿yj skrótu ctrl+h aby zmieniæ wszystkie wyst¹pienia nazwy zmiennej liczbowej. 

Æwiczenia:
Utwórz program w którym zadeklarujesz tablicê liczbow¹. Z u¿yciem pêtli for wypisz wszystkie wartoœci z tej tablicy.
Po przecinku (np. 1,2,3…)
Ka¿dy element w nowej linii
Od ostatniego elementu do pierwszego (odwrotna kolejnoœæ)
Stwórz program, który bêdzie s³u¿y³ do porównywania liczb. Zadeklaruj kilka zmiennych liczbowych, a nastêpnie wykorzystuj¹c instrukcjê warunkow¹ if...else porównuj je ze sob¹ i wyœwietl odpowiedni komunikat.
Przerób program tak aby przyjmowa³ z klawiatury 3 liczby, a nastêpnie sprawdza³ warunek istnienia trójk¹ta.
Stwórz program, który bêdzie wczytywa³ liczbê podan¹ przez u¿ytkownika (ograniczon¹ “z góry” do 15 i “z do³u” do 5), a nastêpnie odejmowa³ od niej 1 i wypisywa³ wynik, a¿ do osi¹gniêcia 0. U¿yj do tego pêtli while.
Stwórz program, który bêdzie wczytywa³ liczbê podan¹ przez u¿ytkownika. Nastêpnie sprawdŸ czy liczba spe³nia podane wymagania (np. >4, <7, !=10 itp.). Jeœli liczba tak wyœwietl komunikat koñcz¹cy, jeœli nie, wyœwietl proœbê o wczytanie liczby. U¿yj do tego pêtli do...while.


Zadanie dodatkowe do æwiczeñ 1:
1.  Przeanalizuj kod z pliku program101.cs. Czemu pokazuje b³¹d przy kompilacji? Popraw go tak, aby program dzia³a³ poprawnie.
2.   Utwórz program, w którym bêd¹ zadeklarowane 3 zmienne a,b,c typu int (bez wspólnych dzielników innych ni¿ 1, np. 5,9,11). Nastêpnie wykonaj i wyœwietl w aplikacji wyniki operacji: a/b, a/c,b/c,b/a,c/a,c/b.
3.   Przeanalizuj kod z pliku program102.cs. Nie uruchomiaj programu. Jakie wartoœci otrzymasz na poszczególnych krokach? SprawdŸ to po kompilacji.
4.   Zadeklaruj zmienn¹ sbyte i przypisz jej wartoœæ 127. Wykonaj na niej operacjê inkrementacji. Wynik wyœwietl na ekranie.
5.   Na pliku program102.cs (lub innym) poæwicz zmianê nazw zmiennych. Czemu nie nale¿y u¿ywaæ opcji „Edit/Find and Replace”? Tip: zaznacz zmienn¹ i naciœnij dwa razy Ctrl+R.
